// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace YoutubePlayer.Api
{
    public class InvidiousApi
    {
        public InvidiousApi() {}
        public static System.Threading.Tasks.Task<System.Collections.Generic.List<YoutubePlayer.Models.InvidiousInstanceInfo>> GetPublicInstances(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        public static System.Threading.Tasks.Task<YoutubePlayer.Models.VideoInfo> GetVideoInfo(string invidiousUrl, string videoId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}

namespace YoutubePlayer.Components
{
    public class InvidiousInstance : UnityEngine.MonoBehaviour
    {
        public string CustomInstanceUrl;
        public InvidiousInstance.InvidiousInstanceType InstanceType;
        public string InstanceUrl { get; }
        public InvidiousInstance() {}
        public System.Threading.Tasks.Task<string> GetInstanceUrl(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        public enum InvidiousInstanceType
        {
            Custom = 1,
            Public = 0,
        }
    }

    [UnityEngine.RequireComponent(typeof(UnityEngine.Video.VideoPlayer))] public class InvidiousVideoPlayer : UnityEngine.MonoBehaviour
    {
        [UnityEngine.Tooltip(@"Check for blocked streams by making a HEAD request. If a stream is blocked, it will try to play a different one.")] public bool CheckForBlockedStreams = true;
        public InvidiousInstance InvidiousInstance;
        [UnityEngine.Tooltip(@"The itag of the video to play. If not set, 720p video will be played.")] public string Itag;
        [UnityEngine.Tooltip(@"Whether to use a proxy to play the video. This is useful when a video gets geoblocked. Not used in WebGL builds.")] public InvidiousVideoPlayer.ProxyVideoType ProxyVideo = InvidiousVideoPlayer.ProxyVideoType.OnlyIfNeeded;
        public string VideoId;
        public UnityEngine.Video.VideoPlayer VideoPlayer { get; }
        public InvidiousVideoPlayer() {}
        public System.Threading.Tasks.Task PlayVideoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        public System.Threading.Tasks.Task PrepareVideoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        public enum ProxyVideoType
        {
            Always = 2,
            Never = 0,
            OnlyIfNeeded = 1,
        }
    }
}

namespace YoutubePlayer.Extensions
{
    public static class InvidiousInstanceExtensions
    {
        public static System.Threading.Tasks.Task<YoutubePlayer.Models.VideoInfo> GetVideoInfo(this YoutubePlayer.Components.InvidiousInstance invidiousInstance, string videoId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        public static string GetVideoThumbnailUrl(this YoutubePlayer.Components.InvidiousInstance invidiousInstance, string videoId);
        public static System.Threading.Tasks.Task<string> GetVideoUrl(this YoutubePlayer.Components.InvidiousInstance invidiousInstance, string videoId, bool proxyVideo = false, string itag = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }

    public static class VideoThumbnailInfoExtensions
    {
        public static System.Threading.Tasks.Task<UnityEngine.Texture2D> ToTextureAsync(this YoutubePlayer.Models.VideoThumbnailInfo videoThumbnailInfo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}

namespace YoutubePlayer.Models
{
    public class InvidiousInstanceInfo
    {
        [Newtonsoft.Json.JsonProperty(@"api")] public bool Api { get; set; }
        [Newtonsoft.Json.JsonProperty(@"cors")] public bool Cors { get; set; }
        [Newtonsoft.Json.JsonProperty(@"flag")] public string Flag { get; set; }
        [Newtonsoft.Json.JsonIgnore] public string Health { get; set; }
        [Newtonsoft.Json.JsonProperty(@"region")] public string Region { get; set; }
        [Newtonsoft.Json.JsonIgnore] public bool Signup { get; set; }
        [Newtonsoft.Json.JsonProperty(@"type")] public string Type { get; set; }
        [Newtonsoft.Json.JsonProperty(@"uri")] public string Uri { get; set; }
        [Newtonsoft.Json.JsonIgnore] public int Users { get; set; }
        [Newtonsoft.Json.JsonIgnore] public string Version { get; set; }
        public InvidiousInstanceInfo() {}
        public override string ToString();
    }

    public class VideoFormatInfo
    {
        [Newtonsoft.Json.JsonProperty(@"itag")] public string Itag { get; set; }
        [Newtonsoft.Json.JsonProperty(@"url")] public string Url { get; set; }
        public VideoFormatInfo() {}
        public override string ToString();
    }

    public class VideoInfo
    {
        [Newtonsoft.Json.JsonProperty(@"adaptiveFormats")] public System.Collections.Generic.List<VideoFormatInfo> AdaptiveFormats { get; set; }
        [Newtonsoft.Json.JsonProperty(@"author")] public string Author { get; set; }
        [Newtonsoft.Json.JsonProperty(@"authorId")] public string AuthorId { get; set; }
        [Newtonsoft.Json.JsonProperty(@"description")] public string Description { get; set; }
        [Newtonsoft.Json.JsonProperty(@"formatStreams")] public System.Collections.Generic.List<VideoFormatInfo> FormatStreams { get; set; }
        [Newtonsoft.Json.JsonProperty(@"lengthSeconds")] public int LengthSeconds { get; set; }
        [Newtonsoft.Json.JsonProperty(@"published")] public long Published { get; set; }
        [Newtonsoft.Json.JsonProperty(@"publishedText")] public string PublishedText { get; set; }
        [Newtonsoft.Json.JsonProperty(@"title")] public string Title { get; set; }
        [Newtonsoft.Json.JsonProperty(@"videoId")] public string VideoId { get; set; }
        [Newtonsoft.Json.JsonProperty(@"videoThumbnails")] public System.Collections.Generic.List<VideoThumbnailInfo> VideoThumbnails { get; set; }
        [Newtonsoft.Json.JsonProperty(@"viewCount")] public long ViewCount { get; set; }
        public VideoInfo() {}
        public override string ToString();
    }

    public class VideoThumbnailInfo
    {
        [Newtonsoft.Json.JsonProperty(@"height")] public int Height { get; set; }
        [Newtonsoft.Json.JsonProperty(@"quality")] public string Quality { get; set; }
        [Newtonsoft.Json.JsonProperty(@"url")] public string Url { get; set; }
        [Newtonsoft.Json.JsonProperty(@"width")] public int Width { get; set; }
        public VideoThumbnailInfo() {}
    }
}
